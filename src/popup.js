// DeepFocus - Popup JavaScript
class DeepFocusPopup {
    constructor() {
        this.currentUrl = '';
        this.currentDomain = '';
        this.isBlocked = false;
        this.init();
    }

    async init() {
        await this.loadCurrentTab();
        this.setupEventListeners();
        this.updateUI();
    }

    async loadCurrentTab() {
        try {
            // Obtener la pesta√±a activa
            const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });
            
            if (tab && tab.url) {
                this.currentUrl = tab.url;
                this.currentDomain = this.extractDomain(tab.url);
                
                // Verificar si el sitio est√° bloqueado
                await this.checkIfBlocked();
            } else {
                this.currentUrl = 'No disponible';
                this.currentDomain = '';
            }
        } catch (error) {
            console.error('Error al cargar la pesta√±a actual:', error);
            this.currentUrl = 'Error al cargar';
            this.currentDomain = '';
        }
    }

    extractDomain(url) {
        try {
            const urlObj = new URL(url);
            return urlObj.hostname;
        } catch (error) {
            return '';
        }
    }

    async checkIfBlocked() {
        try {
            const result = await chrome.storage.local.get(['blockedSites']);
            const blockedSites = result.blockedSites || [];
            
            this.isBlocked = blockedSites.includes(this.currentDomain);
        } catch (error) {
            console.error('Error al verificar si est√° bloqueado:', error);
            this.isBlocked = false;
        }
    }

    setupEventListeners() {
        // Bot√≥n para bloquear sitio
        document.getElementById('block-site').addEventListener('click', () => {
            this.blockCurrentSite();
        });

        // Bot√≥n para desbloquear sitio
        document.getElementById('unblock-site').addEventListener('click', () => {
            this.unblockCurrentSite();
        });

        // Bot√≥n para abrir opciones (pr√≥ximamente)
        document.getElementById('open-options').addEventListener('click', () => {
            this.showMessage('P√°gina de configuraci√≥n pr√≥ximamente', 'info');
        });

        // Bot√≥n para ver estad√≠sticas
        document.getElementById('view-stats').addEventListener('click', () => {
            this.showStats();
        });
    }

    async blockCurrentSite() {
        if (!this.currentDomain) {
            this.showMessage('No se puede bloquear este sitio', 'error');
            return;
        }

        try {
            // Obtener sitios bloqueados actuales
            const result = await chrome.storage.local.get(['blockedSites']);
            const blockedSites = result.blockedSites || [];

            // Agregar el sitio actual si no est√° ya bloqueado
            if (!blockedSites.includes(this.currentDomain)) {
                blockedSites.push(this.currentDomain);
                
                // Guardar en storage
                await chrome.storage.local.set({ blockedSites });
                
                // Actualizar estad√≠sticas
                await this.updateStats('sitesBlocked', 1);
                
                this.isBlocked = true;
                this.updateUI();
                this.showMessage('Sitio bloqueado exitosamente. Refrescando p√°gina...', 'success');
                
                // Refrescar la p√°gina actual despu√©s de un breve delay
                setTimeout(async () => {
                    try {
                        const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });
                        if (tab) {
                            await chrome.tabs.reload(tab.id);
                        }
                    } catch (error) {
                        console.error('Error al refrescar la p√°gina:', error);
                    }
                }, 1500);
            }
        } catch (error) {
            console.error('Error al bloquear sitio:', error);
            this.showMessage('Error al bloquear el sitio', 'error');
        }
    }

    async unblockCurrentSite() {
        if (!this.currentDomain) {
            this.showMessage('No se puede desbloquear este sitio', 'error');
            return;
        }

        try {
            // Obtener sitios bloqueados actuales
            const result = await chrome.storage.local.get(['blockedSites']);
            const blockedSites = result.blockedSites || [];

            // Remover el sitio actual
            const updatedBlockedSites = blockedSites.filter(site => site !== this.currentDomain);
            
            // Guardar en storage
            await chrome.storage.local.set({ blockedSites: updatedBlockedSites });
            
            this.isBlocked = false;
            this.updateUI();
            this.showMessage('Sitio desbloqueado exitosamente', 'success');
        } catch (error) {
            console.error('Error al desbloquear sitio:', error);
            this.showMessage('Error al desbloquear el sitio', 'error');
        }
    }

    updateUI() {
        // Actualizar URL actual
        const urlElement = document.getElementById('current-url');
        urlElement.textContent = this.currentUrl;

        // Actualizar estado del sitio
        const statusElement = document.getElementById('site-status');
        if (this.isBlocked) {
            statusElement.textContent = 'üö´ Bloqueado';
            statusElement.className = 'site-status blocked';
        } else {
            statusElement.textContent = '‚úÖ Accesible';
            statusElement.className = 'site-status unblocked';
        }

        // Mostrar/ocultar botones seg√∫n el estado
        const blockButton = document.getElementById('block-site');
        const unblockButton = document.getElementById('unblock-site');

        if (this.isBlocked) {
            blockButton.style.display = 'none';
            unblockButton.style.display = 'flex';
        } else {
            blockButton.style.display = 'flex';
            unblockButton.style.display = 'none';
        }

        // Actualizar texto motivacional
        this.updateMotivationalText();
    }

    updateMotivationalText() {
        const motivationalTexts = [
            '"Cada minuto que pasas enfocado es una inversi√≥n en tu futuro"',
            '"La concentraci√≥n es la clave del √©xito"',
            '"Tu tiempo es tu recurso m√°s valioso"',
            '"Peque√±as acciones, grandes resultados"',
            '"El enfoque es la diferencia entre el √©xito y el fracaso"'
        ];

        const randomText = motivationalTexts[Math.floor(Math.random() * motivationalTexts.length)];
        document.getElementById('motivational-text').textContent = randomText;
    }

    async updateStats(key, increment = 1) {
        try {
            const result = await chrome.storage.local.get(['stats']);
            const stats = result.stats || {};
            
            stats[key] = (stats[key] || 0) + increment;
            stats.lastUpdated = new Date().toISOString();
            
            await chrome.storage.local.set({ stats });
        } catch (error) {
            console.error('Error al actualizar estad√≠sticas:', error);
        }
    }

    showStats() {
        // Por ahora, mostrar un mensaje simple
        // En futuras versiones, esto abrir√° una p√°gina de estad√≠sticas
        this.showMessage('Funcionalidad de estad√≠sticas pr√≥ximamente', 'info');
    }

    showMessage(message, type = 'info') {
        // Crear un elemento de notificaci√≥n temporal
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.textContent = message;
        
        // Estilos b√°sicos para la notificaci√≥n
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 12px 16px;
            border-radius: 8px;
            color: white;
            font-size: 14px;
            font-weight: 600;
            z-index: 1000;
            animation: slideIn 0.3s ease-out;
        `;

        // Colores seg√∫n el tipo
        if (type === 'success') {
            notification.style.background = '#28a745';
        } else if (type === 'error') {
            notification.style.background = '#dc3545';
        } else {
            notification.style.background = '#667eea';
        }

        // Agregar al DOM
        document.body.appendChild(notification);

        // Remover despu√©s de 3 segundos
        setTimeout(() => {
            notification.style.animation = 'slideOut 0.3s ease-out';
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 300);
        }, 3000);
    }
}

// Inicializar cuando el DOM est√© listo
document.addEventListener('DOMContentLoaded', () => {
    new DeepFocusPopup();
});

// Agregar estilos para las animaciones de notificaci√≥n
const style = document.createElement('style');
style.textContent = `
    @keyframes slideIn {
        from {
            transform: translateX(100%);
            opacity: 0;
        }
        to {
            transform: translateX(0);
            opacity: 1;
        }
    }
    
    @keyframes slideOut {
        from {
            transform: translateX(0);
            opacity: 1;
        }
        to {
            transform: translateX(100%);
            opacity: 0;
        }
    }
`;
document.head.appendChild(style); 